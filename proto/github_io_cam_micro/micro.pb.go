// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: micro.proto

package github_io_cam_micro

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CamMicroHeartbeatType int32

const (
	CamMicroHeartbeatType_Ping CamMicroHeartbeatType = 0
	CamMicroHeartbeatType_Pong CamMicroHeartbeatType = 1
)

// Enum value maps for CamMicroHeartbeatType.
var (
	CamMicroHeartbeatType_name = map[int32]string{
		0: "Ping",
		1: "Pong",
	}
	CamMicroHeartbeatType_value = map[string]int32{
		"Ping": 0,
		"Pong": 1,
	}
)

func (x CamMicroHeartbeatType) Enum() *CamMicroHeartbeatType {
	p := new(CamMicroHeartbeatType)
	*p = x
	return p
}

func (x CamMicroHeartbeatType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CamMicroHeartbeatType) Descriptor() protoreflect.EnumDescriptor {
	return file_micro_proto_enumTypes[0].Descriptor()
}

func (CamMicroHeartbeatType) Type() protoreflect.EnumType {
	return &file_micro_proto_enumTypes[0]
}

func (x CamMicroHeartbeatType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CamMicroHeartbeatType.Descriptor instead.
func (CamMicroHeartbeatType) EnumDescriptor() ([]byte, []int) {
	return file_micro_proto_rawDescGZIP(), []int{0}
}

type CamMicroGetServerIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppName string `protobuf:"bytes,1,opt,name=appName,proto3" json:"appName,omitempty"`
}

func (x *CamMicroGetServerIn) Reset() {
	*x = CamMicroGetServerIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_micro_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CamMicroGetServerIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CamMicroGetServerIn) ProtoMessage() {}

func (x *CamMicroGetServerIn) ProtoReflect() protoreflect.Message {
	mi := &file_micro_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CamMicroGetServerIn.ProtoReflect.Descriptor instead.
func (*CamMicroGetServerIn) Descriptor() ([]byte, []int) {
	return file_micro_proto_rawDescGZIP(), []int{0}
}

func (x *CamMicroGetServerIn) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

type CamMicroGetServerOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *CamMicroGetServerOut) Reset() {
	*x = CamMicroGetServerOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_micro_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CamMicroGetServerOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CamMicroGetServerOut) ProtoMessage() {}

func (x *CamMicroGetServerOut) ProtoReflect() protoreflect.Message {
	mi := &file_micro_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CamMicroGetServerOut.ProtoReflect.Descriptor instead.
func (*CamMicroGetServerOut) Descriptor() ([]byte, []int) {
	return file_micro_proto_rawDescGZIP(), []int{1}
}

func (x *CamMicroGetServerOut) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type CamMicroRegisterIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppName string `protobuf:"bytes,1,opt,name=appName,proto3" json:"appName,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *CamMicroRegisterIn) Reset() {
	*x = CamMicroRegisterIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_micro_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CamMicroRegisterIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CamMicroRegisterIn) ProtoMessage() {}

func (x *CamMicroRegisterIn) ProtoReflect() protoreflect.Message {
	mi := &file_micro_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CamMicroRegisterIn.ProtoReflect.Descriptor instead.
func (*CamMicroRegisterIn) Descriptor() ([]byte, []int) {
	return file_micro_proto_rawDescGZIP(), []int{2}
}

func (x *CamMicroRegisterIn) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *CamMicroRegisterIn) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type CamMicroRegisterOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Done bool `protobuf:"varint,1,opt,name=done,proto3" json:"done,omitempty"`
}

func (x *CamMicroRegisterOut) Reset() {
	*x = CamMicroRegisterOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_micro_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CamMicroRegisterOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CamMicroRegisterOut) ProtoMessage() {}

func (x *CamMicroRegisterOut) ProtoReflect() protoreflect.Message {
	mi := &file_micro_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CamMicroRegisterOut.ProtoReflect.Descriptor instead.
func (*CamMicroRegisterOut) Descriptor() ([]byte, []int) {
	return file_micro_proto_rawDescGZIP(), []int{3}
}

func (x *CamMicroRegisterOut) GetDone() bool {
	if x != nil {
		return x.Done
	}
	return false
}

type CamMicroHeartbeatSteam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type CamMicroHeartbeatType `protobuf:"varint,1,opt,name=type,proto3,enum=CamMicroHeartbeatType" json:"type,omitempty"`
}

func (x *CamMicroHeartbeatSteam) Reset() {
	*x = CamMicroHeartbeatSteam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_micro_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CamMicroHeartbeatSteam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CamMicroHeartbeatSteam) ProtoMessage() {}

func (x *CamMicroHeartbeatSteam) ProtoReflect() protoreflect.Message {
	mi := &file_micro_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CamMicroHeartbeatSteam.ProtoReflect.Descriptor instead.
func (*CamMicroHeartbeatSteam) Descriptor() ([]byte, []int) {
	return file_micro_proto_rawDescGZIP(), []int{4}
}

func (x *CamMicroHeartbeatSteam) GetType() CamMicroHeartbeatType {
	if x != nil {
		return x.Type
	}
	return CamMicroHeartbeatType_Ping
}

var File_micro_proto protoreflect.FileDescriptor

var file_micro_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2f, 0x0a,
	0x13, 0x43, 0x61, 0x6d, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x30,
	0x0a, 0x14, 0x43, 0x61, 0x6d, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x22, 0x48, 0x0a, 0x12, 0x43, 0x61, 0x6d, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x29, 0x0a, 0x13, 0x43, 0x61,
	0x6d, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x75,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x64, 0x6f, 0x6e, 0x65, 0x22, 0x44, 0x0a, 0x16, 0x43, 0x61, 0x6d, 0x4d, 0x69, 0x63, 0x72,
	0x6f, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x12,
	0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x43, 0x61, 0x6d, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x2a, 0x2b, 0x0a, 0x15, 0x43,
	0x61, 0x6d, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x50, 0x6f, 0x6e, 0x67, 0x10, 0x01, 0x32, 0xc4, 0x01, 0x0a, 0x08, 0x43, 0x61, 0x6d,
	0x4d, 0x69, 0x63, 0x72, 0x6f, 0x12, 0x37, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x13, 0x2e, 0x43, 0x61, 0x6d, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x1a, 0x14, 0x2e, 0x43, 0x61, 0x6d, 0x4d, 0x69, 0x63, 0x72,
	0x6f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x22, 0x00, 0x12, 0x43,
	0x0a, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x17, 0x2e, 0x43, 0x61,
	0x6d, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x1a, 0x17, 0x2e, 0x43, 0x61, 0x6d, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x48,
	0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x22, 0x00, 0x28,
	0x01, 0x30, 0x01, 0x12, 0x3a, 0x0a, 0x09, 0x67, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0x14, 0x2e, 0x43, 0x61, 0x6d, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x1a, 0x15, 0x2e, 0x43, 0x61, 0x6d, 0x4d, 0x69, 0x63, 0x72,
	0x6f, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x22, 0x00, 0x42,
	0x2b, 0x0a, 0x13, 0x69, 0x6f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x61, 0x6d,
	0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x5a, 0x14, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f,
	0x69, 0x6f, 0x5f, 0x63, 0x61, 0x6d, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_micro_proto_rawDescOnce sync.Once
	file_micro_proto_rawDescData = file_micro_proto_rawDesc
)

func file_micro_proto_rawDescGZIP() []byte {
	file_micro_proto_rawDescOnce.Do(func() {
		file_micro_proto_rawDescData = protoimpl.X.CompressGZIP(file_micro_proto_rawDescData)
	})
	return file_micro_proto_rawDescData
}

var file_micro_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_micro_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_micro_proto_goTypes = []interface{}{
	(CamMicroHeartbeatType)(0),     // 0: CamMicroHeartbeatType
	(*CamMicroGetServerIn)(nil),    // 1: CamMicroGetServerIn
	(*CamMicroGetServerOut)(nil),   // 2: CamMicroGetServerOut
	(*CamMicroRegisterIn)(nil),     // 3: CamMicroRegisterIn
	(*CamMicroRegisterOut)(nil),    // 4: CamMicroRegisterOut
	(*CamMicroHeartbeatSteam)(nil), // 5: CamMicroHeartbeatSteam
}
var file_micro_proto_depIdxs = []int32{
	0, // 0: CamMicroHeartbeatSteam.type:type_name -> CamMicroHeartbeatType
	3, // 1: CamMicro.register:input_type -> CamMicroRegisterIn
	5, // 2: CamMicro.heartbeat:input_type -> CamMicroHeartbeatSteam
	1, // 3: CamMicro.getServer:input_type -> CamMicroGetServerIn
	4, // 4: CamMicro.register:output_type -> CamMicroRegisterOut
	5, // 5: CamMicro.heartbeat:output_type -> CamMicroHeartbeatSteam
	2, // 6: CamMicro.getServer:output_type -> CamMicroGetServerOut
	4, // [4:7] is the sub-list for method output_type
	1, // [1:4] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_micro_proto_init() }
func file_micro_proto_init() {
	if File_micro_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_micro_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CamMicroGetServerIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_micro_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CamMicroGetServerOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_micro_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CamMicroRegisterIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_micro_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CamMicroRegisterOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_micro_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CamMicroHeartbeatSteam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_micro_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_micro_proto_goTypes,
		DependencyIndexes: file_micro_proto_depIdxs,
		EnumInfos:         file_micro_proto_enumTypes,
		MessageInfos:      file_micro_proto_msgTypes,
	}.Build()
	File_micro_proto = out.File
	file_micro_proto_rawDesc = nil
	file_micro_proto_goTypes = nil
	file_micro_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CamMicroClient is the client API for CamMicro service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CamMicroClient interface {
	Register(ctx context.Context, in *CamMicroRegisterIn, opts ...grpc.CallOption) (*CamMicroRegisterOut, error)
	Heartbeat(ctx context.Context, opts ...grpc.CallOption) (CamMicro_HeartbeatClient, error)
	GetServer(ctx context.Context, in *CamMicroGetServerIn, opts ...grpc.CallOption) (*CamMicroGetServerOut, error)
}

type camMicroClient struct {
	cc grpc.ClientConnInterface
}

func NewCamMicroClient(cc grpc.ClientConnInterface) CamMicroClient {
	return &camMicroClient{cc}
}

func (c *camMicroClient) Register(ctx context.Context, in *CamMicroRegisterIn, opts ...grpc.CallOption) (*CamMicroRegisterOut, error) {
	out := new(CamMicroRegisterOut)
	err := c.cc.Invoke(ctx, "/CamMicro/register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *camMicroClient) Heartbeat(ctx context.Context, opts ...grpc.CallOption) (CamMicro_HeartbeatClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CamMicro_serviceDesc.Streams[0], "/CamMicro/heartbeat", opts...)
	if err != nil {
		return nil, err
	}
	x := &camMicroHeartbeatClient{stream}
	return x, nil
}

type CamMicro_HeartbeatClient interface {
	Send(*CamMicroHeartbeatSteam) error
	Recv() (*CamMicroHeartbeatSteam, error)
	grpc.ClientStream
}

type camMicroHeartbeatClient struct {
	grpc.ClientStream
}

func (x *camMicroHeartbeatClient) Send(m *CamMicroHeartbeatSteam) error {
	return x.ClientStream.SendMsg(m)
}

func (x *camMicroHeartbeatClient) Recv() (*CamMicroHeartbeatSteam, error) {
	m := new(CamMicroHeartbeatSteam)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *camMicroClient) GetServer(ctx context.Context, in *CamMicroGetServerIn, opts ...grpc.CallOption) (*CamMicroGetServerOut, error) {
	out := new(CamMicroGetServerOut)
	err := c.cc.Invoke(ctx, "/CamMicro/getServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CamMicroServer is the server API for CamMicro service.
type CamMicroServer interface {
	Register(context.Context, *CamMicroRegisterIn) (*CamMicroRegisterOut, error)
	Heartbeat(CamMicro_HeartbeatServer) error
	GetServer(context.Context, *CamMicroGetServerIn) (*CamMicroGetServerOut, error)
}

// UnimplementedCamMicroServer can be embedded to have forward compatible implementations.
type UnimplementedCamMicroServer struct {
}

func (*UnimplementedCamMicroServer) Register(context.Context, *CamMicroRegisterIn) (*CamMicroRegisterOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (*UnimplementedCamMicroServer) Heartbeat(CamMicro_HeartbeatServer) error {
	return status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (*UnimplementedCamMicroServer) GetServer(context.Context, *CamMicroGetServerIn) (*CamMicroGetServerOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServer not implemented")
}

func RegisterCamMicroServer(s *grpc.Server, srv CamMicroServer) {
	s.RegisterService(&_CamMicro_serviceDesc, srv)
}

func _CamMicro_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CamMicroRegisterIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CamMicroServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CamMicro/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CamMicroServer).Register(ctx, req.(*CamMicroRegisterIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _CamMicro_Heartbeat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CamMicroServer).Heartbeat(&camMicroHeartbeatServer{stream})
}

type CamMicro_HeartbeatServer interface {
	Send(*CamMicroHeartbeatSteam) error
	Recv() (*CamMicroHeartbeatSteam, error)
	grpc.ServerStream
}

type camMicroHeartbeatServer struct {
	grpc.ServerStream
}

func (x *camMicroHeartbeatServer) Send(m *CamMicroHeartbeatSteam) error {
	return x.ServerStream.SendMsg(m)
}

func (x *camMicroHeartbeatServer) Recv() (*CamMicroHeartbeatSteam, error) {
	m := new(CamMicroHeartbeatSteam)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CamMicro_GetServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CamMicroGetServerIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CamMicroServer).GetServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CamMicro/GetServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CamMicroServer).GetServer(ctx, req.(*CamMicroGetServerIn))
	}
	return interceptor(ctx, in, info, handler)
}

var _CamMicro_serviceDesc = grpc.ServiceDesc{
	ServiceName: "CamMicro",
	HandlerType: (*CamMicroServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "register",
			Handler:    _CamMicro_Register_Handler,
		},
		{
			MethodName: "getServer",
			Handler:    _CamMicro_GetServer_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "heartbeat",
			Handler:       _CamMicro_Heartbeat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "micro.proto",
}
